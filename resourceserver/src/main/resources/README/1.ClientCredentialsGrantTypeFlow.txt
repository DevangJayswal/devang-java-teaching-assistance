Client Credentials Grant Type Flow
-> generally used for api to api invocation or service to service invocation

* Auth Server (KeyCloak): 8083
* Resource Server: 9091 (this)
* API to be served after Authentication and Authorization: 9091 (this)
Well Known API endpoints to be served
localhost:9091/myAccount [ROLE: USER]
localhost:9091/myBalance [ROLE: ADMIN]
localhost:9091/myLoans [authenticated, NO ROLE]
localhost:9091/myCards [ROLE: USER, ADMIN]
localhost:9091/notices [public]
localhost:9091/contact [public]

---------------------------------- GETTING `access_token` --------------------------------------------------------------
INVOKE -> GET -> http://localhost:8083/auth/realms/eazybankdev/.well-known/openid-configuration
calling Auth Server that is KeyCloak for getting all the well-known endpoints

INVOKE -> POST `token_endpoint` -> BODY -> x-www-form-urlencoded
       -> client_id, client_secret, scope, grant_type
       * client_id: eazybankapi <get it from KeyCloak clients>
       * client_secret: ac706764-b886-46a1-9e6f-4034846fca5b <get it from KeyCloak clients credentials>
       * scope: openid (similarly we can use email, address etc. it will give you access token
       and id token. we can also mention number of scopes as well seperated by space like
       `openid email address`. So this would give us openid scope details, email details, and
       address details of the user )
       * grant_type: client_credentials (when there is no user is involved because in this usecase
       we have only api to api invocation only)

RESPONSE:
{
    "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGbEJ0ZXZGYXlqbjBvQ1AwMXJjc2ZTUkYzeU9MbnA1TzdJeDNEamNIek93In0.eyJleHAiOjE2NDcwMzI3OTIsImlhdCI6MTY0NzAzMjQ5MiwianRpIjoiZTMzM2M3MjAtZTczOS00ZDU4LWE3NzItODZmMDUxZGQ2MDQ3IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL2F1dGgvcmVhbG1zL2VhenliYW5rZGV2IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjRhZGM3NDVlLWY0Y2QtNGZiYy1hMDkzLTQ1ZDNhZTZiMTU5YSIsInR5cCI6IkJlYXJlciIsImF6cCI6ImVhenliYW5rYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjQzNDFiNjljLThjMDktNDZmMi1iNDNkLTNlNzlmMTZiYTQzZSIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJjbGllbnRIb3N0IjoiMDowOjA6MDowOjA6MDoxIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJjbGllbnRJZCI6ImVhenliYW5rYXBpIiwicHJlZmVycmVkX3VzZXJuYW1lIjoic2VydmljZS1hY2NvdW50LWVhenliYW5rYXBpIiwiY2xpZW50QWRkcmVzcyI6IjA6MDowOjA6MDowOjA6MSJ9.Dz2-lNobt4VXB63lUlYL994g-Tzi_pctdo92yf_mynd7bKx7UzMTDDs5l2wV-j1oADn7Zm4ewD_-BPVw3xI1d2BnFXhHQZ8Mi8O_2xmnizaW1HCTRCDQIMXkvf6queGoPekYwg2H6JSp46D3W2IC4DKL6S6IgiqcoX5c4cItb1_XjxVup_JpeIiG-TcuDgmVM-aK0Cy4yWug6l7fCfHxhnjsHIM_jnbSYbC_oz8mPVXIiG2At6T0dx2LsRQ0HERitAb-Kq3mjnIckiyq6ae9lSFfg5X4n-qeLYnbGFLZPZsopVoxMaafvG_FF50hcGE10sNZkNvPUIsLs1ywZHdKMQ",
    "expires_in": 300,
    "refresh_expires_in": 1800,
    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJhZjMwOGEyZi04ZTMwLTRiNDAtODY5MS0wMWNjODE2Yzc0ZTgifQ.eyJleHAiOjE2NDcwMzQyOTIsImlhdCI6MTY0NzAzMjQ5MiwianRpIjoiYjJhYTY2NWQtN2YzZi00NTUwLWEzOWYtYjQyN2U0MGMzN2NlIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL2F1dGgvcmVhbG1zL2VhenliYW5rZGV2IiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL2F1dGgvcmVhbG1zL2VhenliYW5rZGV2Iiwic3ViIjoiNGFkYzc0NWUtZjRjZC00ZmJjLWEwOTMtNDVkM2FlNmIxNTlhIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImVhenliYW5rYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjQzNDFiNjljLThjMDktNDZmMi1iNDNkLTNlNzlmMTZiYTQzZSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwifQ.T0gLCR95a9w3mqMlwaryhCXyIg9EFw9qpoQkkdLhlaY",
    "token_type": "bearer",
    "id_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGbEJ0ZXZGYXlqbjBvQ1AwMXJjc2ZTUkYzeU9MbnA1TzdJeDNEamNIek93In0.eyJleHAiOjE2NDcwMzI3OTIsImlhdCI6MTY0NzAzMjQ5MiwiYXV0aF90aW1lIjowLCJqdGkiOiJiODA0NWZiOS0xMGIwLTQwNTItYjcxOC0yYjIwYTRiOGNhYTMiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODMvYXV0aC9yZWFsbXMvZWF6eWJhbmtkZXYiLCJhdWQiOiJlYXp5YmFua2FwaSIsInN1YiI6IjRhZGM3NDVlLWY0Y2QtNGZiYy1hMDkzLTQ1ZDNhZTZiMTU5YSIsInR5cCI6IklEIiwiYXpwIjoiZWF6eWJhbmthcGkiLCJzZXNzaW9uX3N0YXRlIjoiNDM0MWI2OWMtOGMwOS00NmYyLWI0M2QtM2U3OWYxNmJhNDNlIiwiYXRfaGFzaCI6InpMQWhzbFJ3UzRWRGMyaWE0RE94VEEiLCJhY3IiOiIxIiwiY2xpZW50SG9zdCI6IjA6MDowOjA6MDowOjA6MSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiY2xpZW50SWQiOiJlYXp5YmFua2FwaSIsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1lYXp5YmFua2FwaSIsImNsaWVudEFkZHJlc3MiOiIwOjA6MDowOjA6MDowOjEifQ.Hk88A_UcVg9y2gphC8Okr6Nhj84T33w8fXUMz5M0rwId3I31t7MRxdZa44VD3fQhbWJQ0_GL3W0NfOHcoAJZIRaHPWatPox0JQmuJqg-l7W4VrygjA3Z4NPaNDA6rWH6zrNBsADjNHmhFzHeANtuqJYjZsuTDEdHyN-Z4htwrzp8WyoCTY2GFoSFu1Nj6a4-TFldMNGV3FVkvcYIFsKoPpWpNMTSYMzBOcWbO36h3zqxlwS8lwXYb5mH8KQRwG3a3PhQzDDYWZwcu6IRHHOZdjSOMMhXhLJsClElDdz0WX7ODXUMsb_TKn0N4iohOoSP9A5mnVNLXe1d9JsuqrOSrg",
    "not-before-policy": 0,
    "session_state": "4341b69c-8c09-46f2-b43d-3e79f16ba43e",
    "scope": "openid profile email"
}

copy `access_token`
------------------------------------ INVOKE API ENDPOINT with `access_token` ------------------------------------------------------------
INVOKE -> POST -> http://localhost:9091/myAccount
                -> HEADERS -> { Authorization: Bearer<space><access_token> }
                -> BODY -> raw -> JSON -> { "email": "accounts@eazybytes.com" }

RESPONSE -> 403 Forbidden -> because we have configured `/myAccount` should only be accessed by (hasAnyRole) `USER`
                          -> since we have not created any role and assigned to the client that we have created on the
                          KeyCloak, it is throwing 403 Forbidden
                          -> 403 Forbidden means you are authenticated, but you are not authorized
------------------------------------------------------------
INVOKE -> POST -> http://localhost:9091/myLoans ->
                  HEADERS -> { Authorization: Bearer<space><access_token> }
                  BODY -> raw -> JSON -> { "email": "accounts@eazybytes.com" }

RESPONSE -> 200 OK
         -> because endpoint `/myLoans` has not been associated with any role
[
    {
        "loanNumber": 1,
        "email": "accounts@eazybytes.com",
        "startDt": "2020-10-13",
        "loanType": "Home",
        "totalLoan": 200000,
        "amountPaid": 50000,
        "outstandingAmount": 150000,
        "createDt": "2020-10-13"
    },
    {
        "loanNumber": 2,
        "email": "accounts@eazybytes.com",
        "startDt": "2020-06-06",
        "loanType": "Vehicle",
        "totalLoan": 40000,
        "amountPaid": 10000,
        "outstandingAmount": 30000,
        "createDt": "2020-06-06"
    },
    {
        "loanNumber": 3,
        "email": "accounts@eazybytes.com",
        "startDt": "2018-02-14",
        "loanType": "Home",
        "totalLoan": 50000,
        "amountPaid": 10000,
        "outstandingAmount": 40000,
        "createDt": "2018-02-14"
    },
    {
        "loanNumber": 4,
        "email": "accounts@eazybytes.com",
        "startDt": "2018-02-14",
        "loanType": "Personal",
        "totalLoan": 10000,
        "amountPaid": 3500,
        "outstandingAmount": 6500,
        "createDt": "2018-02-14"
    }
]

------------------------------------------------------------
Go ahead and create role in
    KeyCloak -> Roles -> create `USER` and `ADMIN` role
             -> Clients -> Service Account Roles (because this is not an individual user, this is a service account
             which we are trying to use inside `Client Credential Grant Type`)
                         -> Add `USER` and `ADMIN` roles
Now at this point client `eazybankapi` has role access of ADMIN and USER
If we try to get fresh access token and invole `/myAccount` API it should work without any issues

------------------------------------------------------------
INVOKE -> POST -> http://localhost:9091/myAccount
                -> HEADERS -> { Authorization: Bearer<space><access_token> }
                -> BODY -> raw -> JSON -> { "email": "accounts@eazybytes.com" }

RESPONSE -> 200 OK
{
    "accountNumber": 186576453,
    "email": "accounts@eazybytes.com",
    "accountType": "Savings",
    "branchAddress": "123 Main Street, New York",
    "createDt": "2022-03-11"
}

------------------------------------------------------------
we can also check what is present inside <access_token> by going to jwt.io
------------------------------------------------------------
INVOKE -> GET -> http://localhost:8083/auth/realms/eazybankdev/.well-known/openid-configuration
calling Auth Server that is KeyCloak for getting all the well-known endpoints

INVOKE -> POST `token_endpoint` -> BODY -> x-www-form-urlencoded
       -> client_id, client_secret, scope, grant_type
       * client_id: eazybankapi <get it from KeyCloak clients>
       * client_secret: ac706764-b886-46a1-9e6f-4034846fca5b <get it from KeyCloak clients credentials>
       * scope: openid (similarly we can use email, address etc. it will give you access token
       and id token. we can also mention number of scopes as well seperated by space like
       `openid email address`. So this would give us openid scope details, email details, and
       address details of the user )
       * grant_type: client_credentials (when there is no user is involved because in this usecase
       we have only api to api invocation only)

RESPONSE:
{
    "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGbEJ0ZXZGYXlqbjBvQ1AwMXJjc2ZTUkYzeU9MbnA1TzdJeDNEamNIek93In0.eyJleHAiOjE2NDcwMzI3OTIsImlhdCI6MTY0NzAzMjQ5MiwianRpIjoiZTMzM2M3MjAtZTczOS00ZDU4LWE3NzItODZmMDUxZGQ2MDQ3IiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL2F1dGgvcmVhbG1zL2VhenliYW5rZGV2IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjRhZGM3NDVlLWY0Y2QtNGZiYy1hMDkzLTQ1ZDNhZTZiMTU5YSIsInR5cCI6IkJlYXJlciIsImF6cCI6ImVhenliYW5rYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjQzNDFiNjljLThjMDktNDZmMi1iNDNkLTNlNzlmMTZiYTQzZSIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJjbGllbnRIb3N0IjoiMDowOjA6MDowOjA6MDoxIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJjbGllbnRJZCI6ImVhenliYW5rYXBpIiwicHJlZmVycmVkX3VzZXJuYW1lIjoic2VydmljZS1hY2NvdW50LWVhenliYW5rYXBpIiwiY2xpZW50QWRkcmVzcyI6IjA6MDowOjA6MDowOjA6MSJ9.Dz2-lNobt4VXB63lUlYL994g-Tzi_pctdo92yf_mynd7bKx7UzMTDDs5l2wV-j1oADn7Zm4ewD_-BPVw3xI1d2BnFXhHQZ8Mi8O_2xmnizaW1HCTRCDQIMXkvf6queGoPekYwg2H6JSp46D3W2IC4DKL6S6IgiqcoX5c4cItb1_XjxVup_JpeIiG-TcuDgmVM-aK0Cy4yWug6l7fCfHxhnjsHIM_jnbSYbC_oz8mPVXIiG2At6T0dx2LsRQ0HERitAb-Kq3mjnIckiyq6ae9lSFfg5X4n-qeLYnbGFLZPZsopVoxMaafvG_FF50hcGE10sNZkNvPUIsLs1ywZHdKMQ",
    "expires_in": 300,
    "refresh_expires_in": 1800,
    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJhZjMwOGEyZi04ZTMwLTRiNDAtODY5MS0wMWNjODE2Yzc0ZTgifQ.eyJleHAiOjE2NDcwMzQyOTIsImlhdCI6MTY0NzAzMjQ5MiwianRpIjoiYjJhYTY2NWQtN2YzZi00NTUwLWEzOWYtYjQyN2U0MGMzN2NlIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL2F1dGgvcmVhbG1zL2VhenliYW5rZGV2IiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgzL2F1dGgvcmVhbG1zL2VhenliYW5rZGV2Iiwic3ViIjoiNGFkYzc0NWUtZjRjZC00ZmJjLWEwOTMtNDVkM2FlNmIxNTlhIiwidHlwIjoiUmVmcmVzaCIsImF6cCI6ImVhenliYW5rYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjQzNDFiNjljLThjMDktNDZmMi1iNDNkLTNlNzlmMTZiYTQzZSIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwifQ.T0gLCR95a9w3mqMlwaryhCXyIg9EFw9qpoQkkdLhlaY",
    "token_type": "bearer",
    "id_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGbEJ0ZXZGYXlqbjBvQ1AwMXJjc2ZTUkYzeU9MbnA1TzdJeDNEamNIek93In0.eyJleHAiOjE2NDcwMzI3OTIsImlhdCI6MTY0NzAzMjQ5MiwiYXV0aF90aW1lIjowLCJqdGkiOiJiODA0NWZiOS0xMGIwLTQwNTItYjcxOC0yYjIwYTRiOGNhYTMiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODMvYXV0aC9yZWFsbXMvZWF6eWJhbmtkZXYiLCJhdWQiOiJlYXp5YmFua2FwaSIsInN1YiI6IjRhZGM3NDVlLWY0Y2QtNGZiYy1hMDkzLTQ1ZDNhZTZiMTU5YSIsInR5cCI6IklEIiwiYXpwIjoiZWF6eWJhbmthcGkiLCJzZXNzaW9uX3N0YXRlIjoiNDM0MWI2OWMtOGMwOS00NmYyLWI0M2QtM2U3OWYxNmJhNDNlIiwiYXRfaGFzaCI6InpMQWhzbFJ3UzRWRGMyaWE0RE94VEEiLCJhY3IiOiIxIiwiY2xpZW50SG9zdCI6IjA6MDowOjA6MDowOjA6MSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiY2xpZW50SWQiOiJlYXp5YmFua2FwaSIsInByZWZlcnJlZF91c2VybmFtZSI6InNlcnZpY2UtYWNjb3VudC1lYXp5YmFua2FwaSIsImNsaWVudEFkZHJlc3MiOiIwOjA6MDowOjA6MDowOjEifQ.Hk88A_UcVg9y2gphC8Okr6Nhj84T33w8fXUMz5M0rwId3I31t7MRxdZa44VD3fQhbWJQ0_GL3W0NfOHcoAJZIRaHPWatPox0JQmuJqg-l7W4VrygjA3Z4NPaNDA6rWH6zrNBsADjNHmhFzHeANtuqJYjZsuTDEdHyN-Z4htwrzp8WyoCTY2GFoSFu1Nj6a4-TFldMNGV3FVkvcYIFsKoPpWpNMTSYMzBOcWbO36h3zqxlwS8lwXYb5mH8KQRwG3a3PhQzDDYWZwcu6IRHHOZdjSOMMhXhLJsClElDdz0WX7ODXUMsb_TKn0N4iohOoSP9A5mnVNLXe1d9JsuqrOSrg",
    "not-before-policy": 0,
    "session_state": "4341b69c-8c09-46f2-b43d-3e79f16ba43e",
    "scope": "openid profile email"
}

In the response we are getting dedicated separate `id_token`. we can go to jwt.io and look into what is present inside it.
It contains details about the individual user or client application who are trying to perform authentication