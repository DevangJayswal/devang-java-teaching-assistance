# @Bulkhead
resilience4j.bulkhead.instances.default.max-concurrent-calls=10

# @RateLimiter Configuring 2 request in every 10s
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s

# Circuit Breaker
# when service is down for a long time

# @Retry: Useful when service is momentary down,
# you just give the service a little bit of time and then call it again

# configure a specific number of retry intervals
# for different services we can have different kinds of retry configurations
# lets configure for @Retry(name = "sample-api")
resilience4j.retry.instances.sample-api.maxAttempts=5

# we can specify interval as well
resilience4j.retry.instances.sample-api.wait-duration=1s

# configure exponential backoff
# you will see that response takes a little bit more time
# because each subsequent request, it will wait for a little longer
# meaning
# 1st retry =1s
# 2nd retry = 1.5s
# 3rd retry = almost 2.5s
# 4th retry = about 4s
# 5th retry = and so on
# so for each subsequent request, , it will wait for a longer and longer
# that is called Exponential Backoff
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true

# in order to connect our microservice to eureka naming server we just need to add
# `spring-cloud-starter-netflix-eureka-client` in pom.xml
# however, to be on safer side we would typically configure the url of naming server eureka
# following is the configuration
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

spring.jpa.defer-datasource-initialization=true
spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb

spring.application.name=currency-exchange
server.port=8000

# For Spring Boot greater than 2.4.2, whenever we create Config Client it is compulsory to
# configure `spring.config.import`
spring.config.import=optional:configserver:

